// <auto-generated />
using System;
using EvaAgent.Infra.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EvaAgent.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Agentes.Agente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("descricao");

                    b.Property<Guid>("EspacoId")
                        .HasColumnType("uuid")
                        .HasColumnName("espaco_id");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("boolean")
                        .HasColumnName("habilitado");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("PalavrasChaveJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("palavras_chave_json");

                    b.Property<int>("Prioridade")
                        .HasColumnType("integer")
                        .HasColumnName("prioridade");

                    b.Property<string>("PromptSistema")
                        .HasColumnType("text")
                        .HasColumnName("prompt_sistema");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_agente_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_agente_criado_em");

                    b.HasIndex("EspacoId")
                        .HasDatabaseName("idx_agente_espaco");

                    b.HasIndex("Habilitado")
                        .HasDatabaseName("idx_agente_habilitado");

                    b.HasIndex("Prioridade")
                        .HasDatabaseName("idx_agente_prioridade");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("idx_agente_tipo");

                    b.ToTable("agente", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Agentes.IntencaoAgente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AgenteId")
                        .HasColumnType("uuid")
                        .HasColumnName("agente_id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<decimal>("Confianca")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("confianca");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("descricao");

                    b.Property<string>("ExemplosJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("exemplos_json");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("PalavrasChaveJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("palavras_chave_json");

                    b.HasKey("Id");

                    b.HasIndex("AgenteId")
                        .HasDatabaseName("idx_intencao_agente");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_intencao_agente_ativo");

                    b.HasIndex("Confianca")
                        .HasDatabaseName("idx_intencao_confianca");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_intencao_agente_criado_em");

                    b.ToTable("intencao_agente", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Canais.Canal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("ConfiguracaoJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("configuracao_json");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<Guid>("EspacoId")
                        .HasColumnType("uuid")
                        .HasColumnName("espaco_id");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("boolean")
                        .HasColumnName("habilitado");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_canal_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_canal_criado_em");

                    b.HasIndex("EspacoId")
                        .HasDatabaseName("idx_canal_espaco");

                    b.HasIndex("Habilitado")
                        .HasDatabaseName("idx_canal_habilitado");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("idx_canal_tipo");

                    b.ToTable("canal", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Canais.Receptor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("Avatar")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("avatar");

                    b.Property<Guid>("CanalId")
                        .HasColumnType("uuid")
                        .HasColumnName("canal_id");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FormatoNome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("formato_nome");

                    b.Property<string>("Identificador")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("identificador");

                    b.Property<string>("Idioma")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("idioma");

                    b.Property<string>("MetadadosJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadados_json");

                    b.Property<string>("Nome")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("time_zone");

                    b.Property<string>("TomAtendimento")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tom_atendimento");

                    b.Property<bool>("UsarSaudacao")
                        .HasColumnType("boolean")
                        .HasColumnName("usar_saudacao");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_receptor_ativo");

                    b.HasIndex("CanalId")
                        .HasDatabaseName("idx_receptor_canal");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_receptor_criado_em");

                    b.HasIndex("Email")
                        .HasDatabaseName("idx_receptor_email");

                    b.HasIndex("CanalId", "Identificador")
                        .IsUnique()
                        .HasDatabaseName("idx_receptor_canal_identificador");

                    b.ToTable("receptor", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Conectores.AcaoNegocio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("descricao");

                    b.Property<string>("EndpointUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("endpoint_url");

                    b.Property<string>("MetodoHttp")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("metodo_http");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("ParametrosJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("parametros_json");

                    b.Property<bool>("RequererAutenticacao")
                        .HasColumnType("boolean")
                        .HasColumnName("requerer_autenticacao");

                    b.Property<bool>("RequererConfirmacao")
                        .HasColumnType("boolean")
                        .HasColumnName("requerer_confirmacao");

                    b.Property<string>("ScriptSql")
                        .HasColumnType("text")
                        .HasColumnName("script_sql");

                    b.Property<Guid>("SistemaId")
                        .HasColumnType("uuid")
                        .HasColumnName("sistema_id");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_acao_negocio_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_acao_negocio_criado_em");

                    b.HasIndex("Nome")
                        .HasDatabaseName("idx_acao_negocio_nome");

                    b.HasIndex("SistemaId")
                        .HasDatabaseName("idx_acao_negocio_sistema");

                    b.ToTable("acao_negocio", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Conectores.Conector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("ChaveApi")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("chave_api");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("boolean")
                        .HasColumnName("habilitado");

                    b.Property<string>("HeadersJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("headers_json");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<Guid>("SistemaId")
                        .HasColumnType("uuid")
                        .HasColumnName("sistema_id");

                    b.Property<string>("StringConexao")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("string_conexao");

                    b.Property<int?>("TimeoutSegundos")
                        .HasColumnType("integer")
                        .HasColumnName("timeout_segundos");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.Property<string>("TipoBancoDados")
                        .HasColumnType("text")
                        .HasColumnName("tipo_banco_dados");

                    b.Property<string>("UrlBase")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("url_base");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_conector_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_conector_criado_em");

                    b.HasIndex("Habilitado")
                        .HasDatabaseName("idx_conector_habilitado");

                    b.HasIndex("SistemaId")
                        .HasDatabaseName("idx_conector_sistema");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("idx_conector_tipo");

                    b.ToTable("conector", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Conectores.ConsultaNegocio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("ParametrosJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("parametros_json");

                    b.Property<string>("QuerySql")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("query_sql");

                    b.Property<bool>("RequererAutenticacao")
                        .HasColumnType("boolean")
                        .HasColumnName("requerer_autenticacao");

                    b.Property<Guid>("SistemaId")
                        .HasColumnType("uuid")
                        .HasColumnName("sistema_id");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_consulta_negocio_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_consulta_negocio_criado_em");

                    b.HasIndex("Nome")
                        .HasDatabaseName("idx_consulta_negocio_nome");

                    b.HasIndex("SistemaId")
                        .HasDatabaseName("idx_consulta_negocio_sistema");

                    b.ToTable("consulta_negocio", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Conectores.Sistema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("descricao");

                    b.Property<Guid>("EspacoId")
                        .HasColumnType("uuid")
                        .HasColumnName("espaco_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("VersaoApi")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("versao_api");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_sistema_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_sistema_criado_em");

                    b.HasIndex("EspacoId")
                        .HasDatabaseName("idx_sistema_espaco");

                    b.HasIndex("Nome")
                        .HasDatabaseName("idx_sistema_nome");

                    b.ToTable("sistema", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Conversas.Conversa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AgenteId")
                        .HasColumnType("uuid")
                        .HasColumnName("agente_id");

                    b.Property<bool>("Arquivada")
                        .HasColumnType("boolean")
                        .HasColumnName("arquivada");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<DateTime?>("FinalizadaEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finalizada_em");

                    b.Property<DateTime>("IniciadaEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("iniciada_em");

                    b.Property<Guid>("ReceptorId")
                        .HasColumnType("uuid")
                        .HasColumnName("receptor_id");

                    b.Property<string>("ResumoJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("resumo_json");

                    b.Property<string>("Titulo")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("titulo");

                    b.HasKey("Id");

                    b.HasIndex("AgenteId")
                        .HasDatabaseName("idx_conversa_agente");

                    b.HasIndex("Arquivada")
                        .HasDatabaseName("idx_conversa_arquivada");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_conversa_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_conversa_criado_em");

                    b.HasIndex("IniciadaEm")
                        .HasDatabaseName("idx_conversa_iniciada");

                    b.HasIndex("ReceptorId")
                        .HasDatabaseName("idx_conversa_receptor");

                    b.ToTable("conversa", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Conversas.Mensagem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("conteudo");

                    b.Property<Guid>("ConversaId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversa_id");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("Direcao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direcao");

                    b.Property<DateTime?>("EntregueEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entregue_em");

                    b.Property<DateTime>("EnviadaEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enviada_em");

                    b.Property<string>("IdExterno")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id_externo");

                    b.Property<DateTime?>("LidaEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lida_em");

                    b.Property<string>("MetadadosJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadados_json");

                    b.Property<string>("MidiaUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("midia_url");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("TipoMidia")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tipo_midia");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_mensagem_ativo");

                    b.HasIndex("ConversaId")
                        .HasDatabaseName("idx_mensagem_conversa");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_mensagem_criado_em");

                    b.HasIndex("EnviadaEm")
                        .HasDatabaseName("idx_mensagem_enviada");

                    b.HasIndex("IdExterno")
                        .HasDatabaseName("idx_mensagem_externo");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_mensagem_status");

                    b.ToTable("mensagem", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.IA.ProvedorIA", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("ChaveApi")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("chave_api");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<Guid>("EspacoId")
                        .HasColumnType("uuid")
                        .HasColumnName("espaco_id");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("boolean")
                        .HasColumnName("habilitado");

                    b.Property<int?>("LimiteRequisicoesPorMinuto")
                        .HasColumnType("integer")
                        .HasColumnName("limite_requisicoes_por_minuto");

                    b.Property<int?>("MaxTokens")
                        .HasColumnType("integer")
                        .HasColumnName("max_tokens");

                    b.Property<string>("Modelo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modelo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<decimal?>("Temperatura")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("temperatura");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.Property<string>("UrlBase")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("url_base");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_provedor_ia_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_provedor_ia_criado_em");

                    b.HasIndex("EspacoId")
                        .HasDatabaseName("idx_provedor_ia_espaco");

                    b.HasIndex("Habilitado")
                        .HasDatabaseName("idx_provedor_ia_habilitado");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("idx_provedor_ia_tipo");

                    b.ToTable("provedor_ia", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.IA.RespostaIA", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<decimal?>("CustoEstimado")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)")
                        .HasColumnName("custo_estimado");

                    b.Property<string>("MetadadosJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadados_json");

                    b.Property<DateTime>("RespondidoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("respondido_em");

                    b.Property<string>("Resposta")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("resposta");

                    b.Property<Guid>("SolicitacaoIAId")
                        .HasColumnType("uuid")
                        .HasColumnName("solicitacao_i_a_id");

                    b.Property<int?>("TempoRespostaMs")
                        .HasColumnType("integer")
                        .HasColumnName("tempo_resposta_ms");

                    b.Property<int?>("TokensResposta")
                        .HasColumnType("integer")
                        .HasColumnName("tokens_resposta");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_resposta_ia_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_resposta_ia_criado_em");

                    b.HasIndex("RespondidoEm")
                        .HasDatabaseName("idx_resposta_ia_data");

                    b.HasIndex("SolicitacaoIAId")
                        .IsUnique()
                        .HasDatabaseName("idx_resposta_ia_solicitacao");

                    b.ToTable("resposta_ia", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.IA.SolicitacaoIA", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("ContextoJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("contexto_json");

                    b.Property<Guid?>("ConversaId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversa_id");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prompt");

                    b.Property<Guid>("ProvedorIAId")
                        .HasColumnType("uuid")
                        .HasColumnName("provedor_i_a_id");

                    b.Property<DateTime>("SolicitadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("solicitado_em");

                    b.Property<int?>("TokensPrompt")
                        .HasColumnType("integer")
                        .HasColumnName("tokens_prompt");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_solicitacao_ia_ativo");

                    b.HasIndex("ConversaId")
                        .HasDatabaseName("idx_solicitacao_ia_conversa");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_solicitacao_ia_criado_em");

                    b.HasIndex("ProvedorIAId")
                        .HasDatabaseName("idx_solicitacao_ia_provedor");

                    b.HasIndex("SolicitadoEm")
                        .HasDatabaseName("idx_solicitacao_ia_data");

                    b.ToTable("solicitacao_ia", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Identidade.Espaco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("descricao");

                    b.Property<Guid?>("EspacoPaiId")
                        .HasColumnType("uuid")
                        .HasColumnName("espaco_pai_id");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("logo_url");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("Slug")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("slug");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_espaco_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_espaco_criado_em");

                    b.HasIndex("EspacoPaiId")
                        .HasDatabaseName("idx_espaco_pai");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("idx_espaco_slug");

                    b.ToTable("espaco", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Identidade.Papel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Permissoes")
                        .HasColumnType("jsonb")
                        .HasColumnName("permissoes");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_papel_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_papel_criado_em");

                    b.HasIndex("Nome")
                        .HasDatabaseName("idx_papel_nome");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("idx_papel_tipo");

                    b.ToTable("papel", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Identidade.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("Avatar")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailVerificado")
                        .HasColumnType("boolean")
                        .HasColumnName("email_verificado");

                    b.Property<string>("Idioma")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("idioma");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("senha_hash");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("telefone");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("time_zone");

                    b.Property<DateTime?>("UltimoAcesso")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ultimo_acesso");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_usuario_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_usuario_criado_em");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_usuario_email");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Identidade.UsuarioEspaco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AceitoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("aceito_em");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime?>("ConvidadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("convidado_em");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<Guid>("EspacoId")
                        .HasColumnType("uuid")
                        .HasColumnName("espaco_id");

                    b.Property<Guid>("PapelId")
                        .HasColumnType("uuid")
                        .HasColumnName("papel_id");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_usuario_espaco_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_usuario_espaco_criado_em");

                    b.HasIndex("EspacoId")
                        .HasDatabaseName("idx_usuario_espaco_espaco");

                    b.HasIndex("PapelId")
                        .HasDatabaseName("idx_usuario_espaco_papel");

                    b.HasIndex("UsuarioId", "EspacoId")
                        .IsUnique()
                        .HasDatabaseName("idx_usuario_espaco_unique");

                    b.ToTable("usuario_espaco", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.LGPD.ConsentimentoLGPD", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<bool>("Consentido")
                        .HasColumnType("boolean")
                        .HasColumnName("consentido");

                    b.Property<DateTime>("ConsentidoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("consentido_em");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("Finalidade")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("finalidade");

                    b.Property<string>("IpOrigem")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("ip_origem");

                    b.Property<Guid>("ReceptorId")
                        .HasColumnType("uuid")
                        .HasColumnName("receptor_id");

                    b.Property<DateTime?>("RevogadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revogado_em");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_consentimento_lgpd_ativo");

                    b.HasIndex("Consentido")
                        .HasDatabaseName("idx_consentimento_lgpd_consentido");

                    b.HasIndex("ConsentidoEm")
                        .HasDatabaseName("idx_consentimento_lgpd_data");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_consentimento_lgpd_criado_em");

                    b.HasIndex("ReceptorId")
                        .HasDatabaseName("idx_consentimento_lgpd_receptor");

                    b.HasIndex("ReceptorId", "Finalidade")
                        .HasDatabaseName("idx_consentimento_lgpd_receptor_finalidade");

                    b.ToTable("consentimento_lgpd", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.LGPD.RegistroPseudonimizacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<Guid?>("ConversaId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversa_id");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<DateTime?>("ExpiraEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expira_em");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<DateTime>("PseudonimizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("pseudonimizado_em");

                    b.Property<DateTime?>("RevertidoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revertido_em");

                    b.Property<Guid?>("SolicitacaoIAId")
                        .HasColumnType("uuid")
                        .HasColumnName("solicitacao_i_a_id");

                    b.Property<string>("TipoDado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tipo_dado");

                    b.Property<string>("ValorCifrado")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("valor_cifrado");

                    b.Property<string>("ValorOriginalHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("valor_original_hash");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_registro_pseudonimizacao_ativo");

                    b.HasIndex("ConversaId")
                        .HasDatabaseName("idx_registro_pseudonimizacao_conversa");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_registro_pseudonimizacao_criado_em");

                    b.HasIndex("ExpiraEm")
                        .HasDatabaseName("idx_registro_pseudonimizacao_expira");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("idx_registro_pseudonimizacao_guid");

                    b.HasIndex("SolicitacaoIAId")
                        .HasDatabaseName("idx_registro_pseudonimizacao_solicitacao");

                    b.HasIndex("ValorOriginalHash")
                        .HasDatabaseName("idx_registro_pseudonimizacao_hash");

                    b.ToTable("registro_pseudonimizacao", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Memoria.DocumentoTreinamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("ConteudoOriginal")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("conteudo_original");

                    b.Property<string>("ConteudoProcessado")
                        .HasColumnType("text")
                        .HasColumnName("conteudo_processado");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("descricao");

                    b.Property<string>("Embedding")
                        .HasColumnType("text")
                        .HasColumnName("embedding");

                    b.Property<Guid>("GrupoTreinamentoId")
                        .HasColumnType("uuid")
                        .HasColumnName("grupo_treinamento_id");

                    b.Property<DateTime>("IngeridoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ingerido_em");

                    b.Property<string>("MetadadosJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadados_json");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_documento_treinamento_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_documento_treinamento_criado_em");

                    b.HasIndex("GrupoTreinamentoId")
                        .HasDatabaseName("idx_documento_treinamento_grupo");

                    b.HasIndex("IngeridoEm")
                        .HasDatabaseName("idx_documento_treinamento_ingerido");

                    b.HasIndex("Nome")
                        .HasDatabaseName("idx_documento_treinamento_nome");

                    b.ToTable("documento_treinamento", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Memoria.GrupoTreinamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("descricao");

                    b.Property<Guid>("EspacoId")
                        .HasColumnType("uuid")
                        .HasColumnName("espaco_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("tags");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_grupo_treinamento_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_grupo_treinamento_criado_em");

                    b.HasIndex("EspacoId")
                        .HasDatabaseName("idx_grupo_treinamento_espaco");

                    b.HasIndex("Nome")
                        .HasDatabaseName("idx_grupo_treinamento_nome");

                    b.ToTable("grupo_treinamento", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Memoria.MemoriaCurtoPrazo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("Chave")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("chave");

                    b.Property<Guid>("ConversaId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversa_id");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<DateTime>("ExpiraEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expira_em");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_memoria_curto_prazo_ativo");

                    b.HasIndex("ConversaId")
                        .HasDatabaseName("idx_memoria_curto_prazo_conversa");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_memoria_curto_prazo_criado_em");

                    b.HasIndex("ExpiraEm")
                        .HasDatabaseName("idx_memoria_curto_prazo_expira");

                    b.HasIndex("ConversaId", "Chave")
                        .IsUnique()
                        .HasDatabaseName("idx_memoria_curto_prazo_conversa_chave");

                    b.ToTable("memoria_curto_prazo", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Memoria.MemoriaLongoPrazo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("Categoria")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("categoria");

                    b.Property<string>("Chave")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("chave");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<int?>("ImportanciaScore")
                        .HasColumnType("integer")
                        .HasColumnName("importancia_score");

                    b.Property<Guid>("ReceptorId")
                        .HasColumnType("uuid")
                        .HasColumnName("receptor_id");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_memoria_longo_prazo_ativo");

                    b.HasIndex("Categoria")
                        .HasDatabaseName("idx_memoria_longo_prazo_categoria");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_memoria_longo_prazo_criado_em");

                    b.HasIndex("ImportanciaScore")
                        .HasDatabaseName("idx_memoria_longo_prazo_importancia");

                    b.HasIndex("ReceptorId")
                        .HasDatabaseName("idx_memoria_longo_prazo_receptor");

                    b.HasIndex("ReceptorId", "Chave")
                        .HasDatabaseName("idx_memoria_longo_prazo_receptor_chave");

                    b.ToTable("memoria_longo_prazo", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Observabilidade.MetricaUso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("DimensoesJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("dimensoes_json");

                    b.Property<Guid>("EspacoId")
                        .HasColumnType("uuid")
                        .HasColumnName("espaco_id");

                    b.Property<DateTime>("MedidoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("medido_em");

                    b.Property<decimal>("Quantidade")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantidade");

                    b.Property<string>("Recurso")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("recurso");

                    b.Property<string>("TipoMetrica")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tipo_metrica");

                    b.Property<string>("UnidadeMedida")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("unidade_medida");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_metrica_uso_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_metrica_uso_criado_em");

                    b.HasIndex("EspacoId")
                        .HasDatabaseName("idx_metrica_uso_espaco");

                    b.HasIndex("MedidoEm")
                        .HasDatabaseName("idx_metrica_uso_medido");

                    b.HasIndex("Recurso")
                        .HasDatabaseName("idx_metrica_uso_recurso");

                    b.HasIndex("TipoMetrica")
                        .HasDatabaseName("idx_metrica_uso_tipo");

                    b.HasIndex("EspacoId", "TipoMetrica", "MedidoEm")
                        .HasDatabaseName("idx_metrica_uso_espaco_tipo_data");

                    b.ToTable("metrica_uso", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Observabilidade.RegistroAuditoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Acao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("acao");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("Entidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("entidade");

                    b.Property<Guid?>("EntidadeId")
                        .HasColumnType("uuid")
                        .HasColumnName("entidade_id");

                    b.Property<Guid?>("EspacoId")
                        .HasColumnType("uuid")
                        .HasColumnName("espaco_id");

                    b.Property<DateTime>("ExecutadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executado_em");

                    b.Property<string>("IpOrigem")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("ip_origem");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_agent");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_id");

                    b.Property<string>("ValoresAntigos")
                        .HasColumnType("jsonb")
                        .HasColumnName("valores_antigos");

                    b.Property<string>("ValoresNovos")
                        .HasColumnType("jsonb")
                        .HasColumnName("valores_novos");

                    b.HasKey("Id");

                    b.HasIndex("Acao")
                        .HasDatabaseName("idx_registro_auditoria_acao");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_registro_auditoria_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_registro_auditoria_criado_em");

                    b.HasIndex("Entidade")
                        .HasDatabaseName("idx_registro_auditoria_entidade");

                    b.HasIndex("EntidadeId")
                        .HasDatabaseName("idx_registro_auditoria_entidade_id");

                    b.HasIndex("EspacoId")
                        .HasDatabaseName("idx_registro_auditoria_espaco");

                    b.HasIndex("ExecutadoEm")
                        .HasDatabaseName("idx_registro_auditoria_executado");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("idx_registro_auditoria_usuario");

                    b.ToTable("registro_auditoria", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Observabilidade.RegistroErro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("CodigoCorrelacao")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("codigo_correlacao");

                    b.Property<string>("ContextoJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("contexto_json");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<Guid?>("EspacoId")
                        .HasColumnType("uuid")
                        .HasColumnName("espaco_id");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mensagem");

                    b.Property<DateTime>("OcorridoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ocorrido_em");

                    b.Property<bool>("Resolvido")
                        .HasColumnType("boolean")
                        .HasColumnName("resolvido");

                    b.Property<int>("Severidade")
                        .HasColumnType("integer")
                        .HasColumnName("severidade");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text")
                        .HasColumnName("stack_trace");

                    b.Property<string>("TipoErro")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("tipo_erro");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_registro_erro_ativo");

                    b.HasIndex("CodigoCorrelacao")
                        .HasDatabaseName("idx_registro_erro_correlacao");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_registro_erro_criado_em");

                    b.HasIndex("EspacoId")
                        .HasDatabaseName("idx_registro_erro_espaco");

                    b.HasIndex("OcorridoEm")
                        .HasDatabaseName("idx_registro_erro_ocorrido");

                    b.HasIndex("Resolvido")
                        .HasDatabaseName("idx_registro_erro_resolvido");

                    b.HasIndex("Severidade")
                        .HasDatabaseName("idx_registro_erro_severidade");

                    b.HasIndex("TipoErro")
                        .HasDatabaseName("idx_registro_erro_tipo");

                    b.ToTable("registro_erro", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Observabilidade.RegistroExecucao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<Guid?>("ConversaId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversa_id");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<Guid>("EspacoId")
                        .HasColumnType("uuid")
                        .HasColumnName("espaco_id");

                    b.Property<DateTime>("ExecutadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executado_em");

                    b.Property<string>("NomeRecurso")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome_recurso");

                    b.Property<string>("ParametrosJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("parametros_json");

                    b.Property<Guid?>("RecursoId")
                        .HasColumnType("uuid")
                        .HasColumnName("recurso_id");

                    b.Property<string>("ResultadoJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("resultado_json");

                    b.Property<bool>("Sucesso")
                        .HasColumnType("boolean")
                        .HasColumnName("sucesso");

                    b.Property<int>("TempoExecucaoMs")
                        .HasColumnType("integer")
                        .HasColumnName("tempo_execucao_ms");

                    b.Property<string>("TipoExecucao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tipo_execucao");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_registro_execucao_ativo");

                    b.HasIndex("ConversaId")
                        .HasDatabaseName("idx_registro_execucao_conversa");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_registro_execucao_criado_em");

                    b.HasIndex("EspacoId")
                        .HasDatabaseName("idx_registro_execucao_espaco");

                    b.HasIndex("ExecutadoEm")
                        .HasDatabaseName("idx_registro_execucao_executado");

                    b.HasIndex("RecursoId")
                        .HasDatabaseName("idx_registro_execucao_recurso");

                    b.HasIndex("Sucesso")
                        .HasDatabaseName("idx_registro_execucao_sucesso");

                    b.HasIndex("TipoExecucao")
                        .HasDatabaseName("idx_registro_execucao_tipo");

                    b.HasIndex("EspacoId", "TipoExecucao", "ExecutadoEm")
                        .HasDatabaseName("idx_registro_execucao_espaco_tipo_data");

                    b.ToTable("registro_execucao", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Orquestracao.FilaDeadLetter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("ConteudoJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("conteudo_json");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<DateTime>("EnviadoDeadLetterEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enviado_dead_letter_em");

                    b.Property<string>("ErroMensagem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("erro_mensagem");

                    b.Property<Guid>("FilaMensagemId")
                        .HasColumnType("uuid")
                        .HasColumnName("fila_mensagem_id");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text")
                        .HasColumnName("stack_trace");

                    b.Property<int>("TentativasProcessamento")
                        .HasColumnType("integer")
                        .HasColumnName("tentativas_processamento");

                    b.Property<string>("TipoMensagem")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tipo_mensagem");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_fila_dead_letter_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_fila_dead_letter_criado_em");

                    b.HasIndex("EnviadoDeadLetterEm")
                        .HasDatabaseName("idx_fila_dead_letter_enviado");

                    b.HasIndex("FilaMensagemId")
                        .HasDatabaseName("idx_fila_dead_letter_mensagem");

                    b.HasIndex("TipoMensagem")
                        .HasDatabaseName("idx_fila_dead_letter_tipo");

                    b.ToTable("fila_dead_letter", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Orquestracao.FilaMensagem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("ConteudoJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("conteudo_json");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("ErroMensagem")
                        .HasColumnType("text")
                        .HasColumnName("erro_mensagem");

                    b.Property<Guid>("EspacoId")
                        .HasColumnType("uuid")
                        .HasColumnName("espaco_id");

                    b.Property<int>("MaxTentativas")
                        .HasColumnType("integer")
                        .HasColumnName("max_tentativas");

                    b.Property<DateTime?>("ProcessadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processado_em");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("TentativasProcessamento")
                        .HasColumnType("integer")
                        .HasColumnName("tentativas_processamento");

                    b.Property<string>("TipoMensagem")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tipo_mensagem");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_fila_mensagem_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_fila_mensagem_criado_em");

                    b.HasIndex("EspacoId")
                        .HasDatabaseName("idx_fila_mensagem_espaco");

                    b.HasIndex("ProcessadoEm")
                        .HasDatabaseName("idx_fila_mensagem_processado");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_fila_mensagem_status");

                    b.HasIndex("TipoMensagem")
                        .HasDatabaseName("idx_fila_mensagem_tipo");

                    b.ToTable("fila_mensagem", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Orquestracao.TarefaAgendada", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("CronExpressao")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cron_expressao");

                    b.Property<Guid>("EspacoId")
                        .HasColumnType("uuid")
                        .HasColumnName("espaco_id");

                    b.Property<bool>("Habilitada")
                        .HasColumnType("boolean")
                        .HasColumnName("habilitada");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<string>("ParametrosJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("parametros_json");

                    b.Property<DateTime?>("ProximaExecucao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("proxima_execucao");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("TipoTarefa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tipo_tarefa");

                    b.Property<DateTime?>("UltimaExecucao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ultima_execucao");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("idx_tarefa_agendada_ativo");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("idx_tarefa_agendada_criado_em");

                    b.HasIndex("EspacoId")
                        .HasDatabaseName("idx_tarefa_agendada_espaco");

                    b.HasIndex("Habilitada")
                        .HasDatabaseName("idx_tarefa_agendada_habilitada");

                    b.HasIndex("ProximaExecucao")
                        .HasDatabaseName("idx_tarefa_agendada_proxima");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_tarefa_agendada_status");

                    b.ToTable("tarefa_agendada", (string)null);
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Agentes.Agente", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Identidade.Espaco", "Espaco")
                        .WithMany()
                        .HasForeignKey("EspacoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Espaco");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Agentes.IntencaoAgente", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Agentes.Agente", "Agente")
                        .WithMany("Intencoes")
                        .HasForeignKey("AgenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agente");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Canais.Canal", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Identidade.Espaco", "Espaco")
                        .WithMany()
                        .HasForeignKey("EspacoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Espaco");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Canais.Receptor", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Canais.Canal", "Canal")
                        .WithMany("Receptores")
                        .HasForeignKey("CanalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Canal");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Conectores.AcaoNegocio", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Conectores.Sistema", "Sistema")
                        .WithMany("Acoes")
                        .HasForeignKey("SistemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sistema");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Conectores.Conector", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Conectores.Sistema", "Sistema")
                        .WithMany("Conectores")
                        .HasForeignKey("SistemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sistema");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Conectores.ConsultaNegocio", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Conectores.Sistema", "Sistema")
                        .WithMany("Consultas")
                        .HasForeignKey("SistemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sistema");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Conectores.Sistema", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Identidade.Espaco", "Espaco")
                        .WithMany()
                        .HasForeignKey("EspacoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Espaco");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Conversas.Conversa", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Agentes.Agente", "Agente")
                        .WithMany()
                        .HasForeignKey("AgenteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AgenteIA.Dominio.Entidades.Canais.Receptor", "Receptor")
                        .WithMany("Conversas")
                        .HasForeignKey("ReceptorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agente");

                    b.Navigation("Receptor");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Conversas.Mensagem", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Conversas.Conversa", "Conversa")
                        .WithMany("Mensagens")
                        .HasForeignKey("ConversaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversa");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.IA.ProvedorIA", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Identidade.Espaco", "Espaco")
                        .WithMany()
                        .HasForeignKey("EspacoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Espaco");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.IA.RespostaIA", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.IA.SolicitacaoIA", "SolicitacaoIA")
                        .WithOne("Resposta")
                        .HasForeignKey("AgenteIA.Dominio.Entidades.IA.RespostaIA", "SolicitacaoIAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SolicitacaoIA");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.IA.SolicitacaoIA", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Conversas.Conversa", "Conversa")
                        .WithMany()
                        .HasForeignKey("ConversaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AgenteIA.Dominio.Entidades.IA.ProvedorIA", "ProvedorIA")
                        .WithMany()
                        .HasForeignKey("ProvedorIAId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversa");

                    b.Navigation("ProvedorIA");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Identidade.Espaco", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Identidade.Espaco", "EspacoPai")
                        .WithMany("SubEspacos")
                        .HasForeignKey("EspacoPaiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("EspacoPai");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Identidade.UsuarioEspaco", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Identidade.Espaco", "Espaco")
                        .WithMany("UsuarioEspacos")
                        .HasForeignKey("EspacoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgenteIA.Dominio.Entidades.Identidade.Papel", "Papel")
                        .WithMany("UsuarioEspacos")
                        .HasForeignKey("PapelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AgenteIA.Dominio.Entidades.Identidade.Usuario", "Usuario")
                        .WithMany("UsuarioEspacos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Espaco");

                    b.Navigation("Papel");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.LGPD.ConsentimentoLGPD", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Canais.Receptor", "Receptor")
                        .WithMany()
                        .HasForeignKey("ReceptorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receptor");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.LGPD.RegistroPseudonimizacao", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Conversas.Conversa", "Conversa")
                        .WithMany()
                        .HasForeignKey("ConversaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AgenteIA.Dominio.Entidades.IA.SolicitacaoIA", "SolicitacaoIA")
                        .WithMany()
                        .HasForeignKey("SolicitacaoIAId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Conversa");

                    b.Navigation("SolicitacaoIA");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Memoria.DocumentoTreinamento", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Memoria.GrupoTreinamento", "GrupoTreinamento")
                        .WithMany("Documentos")
                        .HasForeignKey("GrupoTreinamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrupoTreinamento");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Memoria.GrupoTreinamento", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Identidade.Espaco", "Espaco")
                        .WithMany()
                        .HasForeignKey("EspacoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Espaco");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Memoria.MemoriaCurtoPrazo", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Conversas.Conversa", "Conversa")
                        .WithMany()
                        .HasForeignKey("ConversaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversa");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Memoria.MemoriaLongoPrazo", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Canais.Receptor", "Receptor")
                        .WithMany()
                        .HasForeignKey("ReceptorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receptor");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Observabilidade.MetricaUso", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Identidade.Espaco", "Espaco")
                        .WithMany()
                        .HasForeignKey("EspacoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Espaco");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Observabilidade.RegistroAuditoria", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Identidade.Espaco", "Espaco")
                        .WithMany()
                        .HasForeignKey("EspacoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AgenteIA.Dominio.Entidades.Identidade.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Espaco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Observabilidade.RegistroErro", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Identidade.Espaco", "Espaco")
                        .WithMany()
                        .HasForeignKey("EspacoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Espaco");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Observabilidade.RegistroExecucao", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Conversas.Conversa", "Conversa")
                        .WithMany()
                        .HasForeignKey("ConversaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AgenteIA.Dominio.Entidades.Identidade.Espaco", "Espaco")
                        .WithMany()
                        .HasForeignKey("EspacoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversa");

                    b.Navigation("Espaco");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Orquestracao.FilaMensagem", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Identidade.Espaco", "Espaco")
                        .WithMany()
                        .HasForeignKey("EspacoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Espaco");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Orquestracao.TarefaAgendada", b =>
                {
                    b.HasOne("AgenteIA.Dominio.Entidades.Identidade.Espaco", "Espaco")
                        .WithMany()
                        .HasForeignKey("EspacoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Espaco");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Agentes.Agente", b =>
                {
                    b.Navigation("Intencoes");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Canais.Canal", b =>
                {
                    b.Navigation("Receptores");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Canais.Receptor", b =>
                {
                    b.Navigation("Conversas");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Conectores.Sistema", b =>
                {
                    b.Navigation("Acoes");

                    b.Navigation("Conectores");

                    b.Navigation("Consultas");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Conversas.Conversa", b =>
                {
                    b.Navigation("Mensagens");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.IA.SolicitacaoIA", b =>
                {
                    b.Navigation("Resposta");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Identidade.Espaco", b =>
                {
                    b.Navigation("SubEspacos");

                    b.Navigation("UsuarioEspacos");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Identidade.Papel", b =>
                {
                    b.Navigation("UsuarioEspacos");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Identidade.Usuario", b =>
                {
                    b.Navigation("UsuarioEspacos");
                });

            modelBuilder.Entity("AgenteIA.Dominio.Entidades.Memoria.GrupoTreinamento", b =>
                {
                    b.Navigation("Documentos");
                });
#pragma warning restore 612, 618
        }
    }
}
